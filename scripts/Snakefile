configfile: "config.yaml"
run_in_slurm_env = True

if run_in_slurm_env == True:
    shell.prefix("module load R/3.6; module load trimmomatic/0.36; module load fastqc/0.11.7; module load bowtie2/2.3.5; module load samtools/1.8; module load bedtools/2.27.1; module load subread/1.6.2; ")

rule all:
    input:
        expand("{fastq}.without_barcodes_and_adapters.fq", fastq=config["fastq"]),
        #expand("fastqc_after_trimming/{fastq}.without_barcodes_and_adapters_fastqc.html", fastq=config["fastq"]),
        #expand("fastqc_after_trimming/{fastq}.without_barcodes_and_adapters_fastqc.zip", fastq=config["fastq"]),
        expand("{combine_samples}", combine_samples=config["combine_samples"]),
        expand("mapping/{mapping}.fq", mapping=config["mapping"]["fastq"]),
        expand("mapping/{mapping}.sam", mapping=config["mapping"]["sam"]),
        expand("mapping/{mapping}.single_mapped.sam", mapping=config["mapping"]["sam"]),
        expand("mapping/{mapping}.single_mapped.bam", mapping=config["mapping"]["sam"]),
        expand("mapping/{combine_bam}", combine_bam=config["combine_bam"]),
        expand("bed_files/{bed_name}", bed_name=config["bam_to_bed"]["bed_name"]),
        expand("sample_sites_generation/{sample_site_definition}", sample_site_definition=config["sample_site_definition"]),
        expand("multiple_bed/{find_unique_pos}", find_unique_pos=config["find_unique_pos"])[0:2],
        expand("bed_files/{find_unique_pos}", find_unique_pos=config["find_unique_pos"])[2],
        expand("{fastq}.without_barc_and_adapt_plus_qc.fq", fastq=config["fastq"]),
        expand("mapping/{fastq}_{map}.fq", fastq=config["fastq"], map=config["mapping"]["fastq"]),
        expand("mapping/{fastq}{sam_samples}.sam", fastq=config["fastq"], sam_samples=config["mapping"]["sam_samples"]),
        expand("mapping/{fastq}{sam_samples}.single_map.sam", fastq=config["fastq"], sam_samples=config["mapping"]["sam_samples"]),
        expand("mapping/{fastq}{sam_samples}.single_map.bam", fastq=config["fastq"], sam_samples=config["mapping"]["sam_samples"]),
        expand("mapping/{fastq}_combined.bam", fastq=config["fastq"]),
        expand("bed_files/{find_unique_pos}", find_unique_pos=config["featurecounts"])[0],
        expand("counts/{find_unique_pos}.tst", find_unique_pos=config["featurecounts"])[1],
        expand("bed_files/{counts_correction}", counts_correction=config["counts_correction"])[0],
        expand("counts/{counts_correction}", counts_correction=config["counts_correction"])[1],
        expand("counts/{techinical_replicates}", techinical_replicates=config["techinical_replicates"]["output"]),
        expand("restriction_sites/{met_site_output}.bed", met_site_output=config["find_methylation_site_position_outputs_p2"])[0],
        expand("restriction_sites/{met_site_output}.bed", met_site_output=config["find_methylation_site_position_outputs_p2"])[1],
        expand("position_of_the_sampled_sites/{methylatio_site_output}.bed", methylatio_site_output=config["detemines_sampled_site_position"])[0],
        expand("position_of_the_sampled_sites/{methylatio_site_output}.bed", methylatio_site_output=config["detemines_sampled_site_position"])[1],
        expand("counts/{methylatio_site_output}.csv", methylatio_site_output=config["detemines_sampled_site_position"])[2],
        expand("position_of_the_sampled_sites/{methylatio_site_output}_merged.tst", methylatio_site_output=config["detemines_sampled_site_position"])[1],
        expand("position_of_the_sampled_sites/{methylatio_site_output}_merged.bed", methylatio_site_output=config["detemines_sampled_site_position"])[1],
        expand("in_silico_frags/{fragments_analysis_outptus}.bed", fragments_analysis_outptus=config["fragments_analysis_outptus"])[0],
        expand("in_silico_frags/{fragments_analysis_outptus}.txt", fragments_analysis_outptus=config["fragments_analysis_outptus"])[1],
        expand("images/in_silico_frags/{fragments_analysis_outptus}.svg", fragments_analysis_outptus=config["fragments_analysis_outptus"])[2],
        expand("images/sites_distribution/{dist_graph}", dist_graph=config["dist_graph"])[0],
        expand("true_sites/{groups}_{output_bigger_than_0}.txt", groups=config["DEseq2_with_DArTCounts_params"]["groups"], output_bigger_than_0=config["marks_with_msp_outputs"]),
        expand("{intersect_params}_intersect_marks.txt", intersect_params=config["intersect_marks_params"]["prefix"]),
        expand("{prefix_deseq}_{groups}_{subset_model}_DE_stats.txt", prefix_deseq=config["DEseq2_with_DArTCounts_params"]["prefix"], groups=config["DEseq2_with_DArTCounts_params"]["groups"],
        subset_model=config["DEseq2_with_DArTCounts_params"]["subset_model"]),
        expand("{prefix_deseq}_{groups}_{subset_model}_DE_marks.txt", prefix_deseq=config["DEseq2_with_DArTCounts_params"]["prefix"], groups=config["DEseq2_with_DArTCounts_params"]["groups"],
        subset_model=config["DEseq2_with_DArTCounts_params"]["subset_model"]),
        expand("{prefix_deseq}_{groups}_consensus_methylated_sites_{subset_model}.tst",prefix_deseq=config["DEseq2_with_DArTCounts_params"]["prefix"], groups=config["DEseq2_with_DArTCounts_params"]["groups"], subset_model=config["DEseq2_with_DArTCounts_params"]["subset_model"]),
        expand("images/venn_plots_by_group/{outputs_venn}", outputs_venn=config["venn_plots_g2_g3_outputs"]["marks"]),
        expand("intersections_to_bar_plot/{outputs_venn_text}_Leaf-MG_vs_Leaf-PR_intersection_marks.txt", outputs_venn_text=config["clones_names"]),
        expand("intersections_to_bar_plot/{outputs_venn_text}_Leaf-MG_vs_Leaf-PR_Leaf-MG_unique_marks.txt", outputs_venn_text=config["clones_names"]),
        expand("intersections_to_bar_plot/{outputs_venn_text}_Leaf-MG_vs_Leaf-PR_Leaf-PR_unique_marks.txt", outputs_venn_text=config["clones_names"]),
        expand("intersections_to_bar_plot/{outputs_venn_text}_Wood-MG_vs_Wood-PR_intersection_marks.txt", outputs_venn_text=config["clones_names"]),
        expand("intersections_to_bar_plot/{outputs_venn_text}_Wood-MG_vs_Wood-PR_Wood-MG_unique_marks.txt", outputs_venn_text=config["clones_names"]),
        expand("intersections_to_bar_plot/{outputs_venn_text}_Wood-MG_vs_Wood-PR_Wood-PR_unique_marks.txt", outputs_venn_text=config["clones_names"]),
        expand("images/bar_plots/{outputs_venn}", outputs_venn=config["venn_plots_g2_g3_outputs"]["file_name"]),
        expand("images/SuperExactTest/{outputs_super}{sufix}.svg", outputs_super=config["clones_names"], sufix=config["SuperExactTest"]["sufix_same_clone"]),
        expand("super_exact_out/summary_{outputs_super}{sufix}.txt", outputs_super=config["clones_names"], sufix=config["SuperExactTest"]["sufix_same_clone"]),
        expand("images/SuperExactTest/{tissues}_{sufix_same_place}_{place}.svg", tissues=config["tissues"], sufix_same_place=config["SuperExactTest"]["sufix_same_place"], place=config["places_g2_g3"]),
        expand("super_exact_out/summary_{tissues}_{sufix_same_place}_{place}.txt", tissues=config["tissues"], sufix_same_place=config["SuperExactTest"]["sufix_same_place"], place=config["places_g2_g3"]),
        expand("images/SuperExactTest/{sufix_exclusive_in_each_place}_{tissues}_{places_int}.svg", sufix_exclusive_in_each_place=config["SuperExactTest"]["sufix_intersect_in_each_place"], places_int=config["SuperExactTest"]["groups_graphs_3"], tissues=config["tissues"]),
        expand("super_exact_out/summary_{sufix_exclusive_in_each_place}_{tissues}_{places_int}.txt", sufix_exclusive_in_each_place=config["SuperExactTest"]["sufix_intersect_in_each_place"], places_int=config["SuperExactTest"]["groups_graphs_3"], tissues=config["tissues"]),
        expand("{file}", file=config["counts_larger_than_threshold"]),
        expand("methylated_sites/{make_bed_methylated_sites}", make_bed_methylated_sites=config["make_bed_methylated_sites"]),
        expand("genomic_context_files/{genomic_context}", genomic_context=config["genomic_context_outputs"])[0:6],
        expand("images/genomic_context/{genomic_context}", genomic_context=config["genomic_context_outputs"])[6],
        expand("{p2_out2}", p2_out2=config["p2_out2"]),
        expand("{p4_out1}", p4_out1=config["p4_out1"]),
        expand("{p4_out2}", p4_out2=config["p4_out2"]),
        expand("{p4_out3}", p4_out3=config["p4_out3"]),
        expand("{p4_out4}", p4_out4=config["p4_out4"]),
        expand("genomic_context_files/group_{group}_{transposons_for_sample}", group=config["DEseq2_with_DArTCounts_params"]["groups"], transposons_for_sample=config["transposons_plots"]["transposons_for_sample"]),
        expand("images/transposons_plots/group_{group}_{tissue}_MSDArT_superexact_plot_TE.svg", group=config["DEseq2_with_DArTCounts_params"]["groups"], tissue=config["tissues"]),
        expand("genomic_context_files/group_{group}_{tissue}_{transposons_sup}", group=config["DEseq2_with_DArTCounts_params"]["groups"], tissue=config["tissues"], transposons_sup=config["transposons_plots"]["transposon_superexact"]),
        expand("genomic_context_files/{transposons_table}", transposons_table=config["transposons_plots"]["transposons_table"]),
        expand("images/transposons_plots/{transposon_bar_plot}", transposon_bar_plot=config["transposons_plots"]["transposon_bar_plot"]),
        expand("images/PCAs/{outputs_pcas}", outputs_pcas=config["PCA"]["outputs"]),
        expand("annotation/biomart/{biomart_output}", biomart_output=config["biomart_output"]),
        expand("annotation/{annotation_table_output}", annotation_table_output=config["make_annotation_table"]["annotation_table_output"])[0],
        expand("annotation/biomart_blast2go/{annotation_table_output}", annotation_table_output=config["make_annotation_table"]["annotation_table_output"])[1],
        expand("images/phenotype/{phenotype_outs}", phenotype_outs=config["phenotype_outs"])

rule barcode_removing:
    input:
        expand("{barcodes_files}", barcodes_files=config["barcodes_files"]),
        expand("{adapters_file}", adapters_file=config["adapters_file"]),
        expand("{fastq}.FASTQ.gz", fastq=config["fastq"])
    output:
        expand("{fastq}.without_barcodes_and_adapters.fq", fastq=config["fastq"])
    shell:
        """
        #defines the input files

        barcode_file1={input[0]}
        barcode_file2={input[1]}
        adapters_file={input[2]}

        #execute using the two sets of barcodes

        while read FILE barcode_sequence barcode_size
        do
        trimmomatic SE -threads 12 $FILE.FASTQ.gz $FILE.without_barcodes_and_adapters.fq ILLUMINACLIP:$adapters_file:2:30:6 HEADCROP:$barcode_size MINLEN:20
        done < "$barcode_file1"

        while read FILE barcode_sequence barcode_size
        do
        trimmomatic SE -threads 12 $FILE.FASTQ.gz $FILE.without_barcodes_and_adapters.fq ILLUMINACLIP:$adapters_file:2:30:6 HEADCROP:$barcode_size MINLEN:20
        done < "$barcode_file2"

        """

rule fastqc:
    input:
        expand("{fastq}.without_barcodes_and_adapters.fq", fastq=config["fastq"])
    output:
        expand("fastqc_after_trimming/{fastq}.without_barcodes_and_adapters_fastqc.html", fastq=config["fastq"]),
        expand("fastqc_after_trimming/{fastq}.without_barcodes_and_adapters_fastqc.zip", fastq=config["fastq"])
    shell:
        "fastqc *.fq;"
        "mv *fastqc.zip fastqc_after_trimming;"
        "mv *fastqc.html fastqc_after_trimming"

rule combine_samples:
    input:
        expand("{fastq}.without_barcodes_and_adapters.fq", fastq=config["fastq"])
    output:
        expand("{combine_samples}", combine_samples=config["combine_samples"])
    shell:
        "cat {input} > {output}"

rule mapping:
    input:
        expand("{reference_genome}", reference_genome=config["reference_genome"]),
        expand("{combine_samples}", combine_samples=config["combine_samples"])
    params:
        threads=config["mapping"]["threads"]
    output:
        expand("mapping/{mapping}.fq", mapping=config["mapping"]["fastq"]),
        expand("mapping/{mapping}.sam", mapping=config["mapping"]["sam"])
    shell:
        """

            base=$(basename {input[0]} ".fa")

            bowtie2-build -f --threads {params.threads} {input[0]} $base

            bowtie2 -p {params.threads} -q -k 2 -N 0 -L 15 -i S,1,0.50 -R 3 --no-1mm-upfront --end-to-end --no-unal --score-min L,0,0 -x $base --un {output[0]} -U {input[1]} -S {output[4]}

            bowtie2 -p {params.threads} -q -k 2 -N 0 -L 15 -i S,1,0.50 -R 3 --no-1mm-upfront --end-to-end --no-unal --mp 2 --np 10 --rdg 10 --rfg 10 --score-min L,-2,0 -x $base --un {output[1]} -U {output[0]} -S {output[5]}

            bowtie2 -p {params.threads} -q -k 2 -N 0 -L 15 -i S,1,0.50 -R 3 --no-1mm-upfront --end-to-end --no-unal --mp 2 --np 10 --rdg 10 --rfg 10 --score-min L,-4,0 -x $base --un {output[2]} -U {output[1]} -S {output[6]}

            bowtie2 -p {params.threads} -q -k 2 -N 0 -L 15 -i S,1,0.50 -R 3 --no-1mm-upfront --end-to-end --no-unal --mp 2 --np 10 --rdg 10 --rfg 10 --score-min L,-6,0 -x $base --un {output[3]} -U {output[2]} -S {output[7]}

        """

rule extract_sing_mapping:
    input:
        expand("mapping/{mapping}.sam", mapping=config["mapping"]["sam"])
    output:
        expand("mapping/{mapping}.single_mapped.sam", mapping=config["mapping"]["sam"])
    shell:
        """

            for sample in `ls mapping/*.sam`
            do
            base=$(basename $sample \".sam\")

            samtools view -h mapping/${{base}}.sam | grep -v \"XS:i:\" > mapping/${{base}}.single_mapped.sam
            done

        """

rule sam_to_bam:
    input:
        expand("mapping/{mapping}.single_mapped.sam", mapping=config["mapping"]["sam"]),
    output:
        expand("mapping/{mapping}.single_mapped.bam", mapping=config["mapping"]["sam"])
    shell:
        """
            for sample in `ls mapping/*single_mapped.sam`
            do
            base=$(basename $sample \".sam\")
            samtools view -b mapping/${{base}}.sam > mapping/${{base}}.bam
            samtools sort mapping/${{base}}.bam > mapping/tmp.bam
            mv mapping/tmp.bam mapping/${{base}}.bam
            done

        """

rule merge_bam:
    input:
        expand("mapping/{mapping}.single_mapped.bam", mapping=config["mapping"]["sam"])
    output:
        expand("mapping/{combine_bam}", combine_bam=config["combine_bam"])
    shell:
        """

            samtools merge -f {output[0]} {input[0]} {input[1]} {input[2]} {input[3]}
            samtools sort {output[0]} > mapping/temp.bam

            mv mapping/temp.bam {output[0]}

        """

rule bam_to_bed:
    input:
        expand("mapping/{combine_bam}", combine_bam=config["combine_bam"])
    output:
        expand("bed_files/{bed_name}", bed_name=config["bam_to_bed"]["bed_name"])
    shell:
        """
            #conversion from bam to bed

            #Deletes intermediate files

            #rm mapping/*.sam
            #rm mapping/*mapped.bam

            bamToBed -i {input[0]} > {output[0]}
            bedtools sort -i {output[0]} > tmp.bed
            mv tmp.bed {output[0]}

        """

rule sample_site_definition:
    input:
        expand("bed_files/{bed_name}", bed_name=config["bam_to_bed"]["bed_name"]),
        expand("{enzymes_sites}", enzymes_sites=config["enzymes_sites"])
    output:
        expand("sample_sites_generation/{sample_site_definition}", sample_site_definition=config["sample_site_definition"])
    shell:
        """

            cat {input[0]} {input[1]} > bed_files/enz_sites_sample_reads.bed

            bedtools sort -i bed_files/enz_sites_sample_reads.bed > bed_files/tmp.bed

            mv bed_files/tmp.bed sample_sites_generation/enz_sites_sample_reads.bed

            bedtools cluster -d -1 -s -i sample_sites_generation/enz_sites_sample_reads.bed > {output[0]}

            #rm sample_sites_generation/enz_sites_sample_reads.bed

            Rscript split_clusters.R --out1 {output[1]} {output[0]}

        """

rule find_unique_pos:
    input:
        expand("sample_sites_generation/{sample_site_definition}", sample_site_definition=config["sample_site_definition"])[1]
    output:
        expand("multiple_bed/{find_unique_pos}", find_unique_pos=config["find_unique_pos"])[0:2],
        expand("bed_files/{find_unique_pos}", find_unique_pos=config["find_unique_pos"])[2]
    shell:
        """

            cd multiple_bed
            rm -r clusters_without_pstI/
            rm -r good_clusters/

            awk -F'\t' '{{print > $7".bed"}}' ./../{input[0]}

            Rscript ./../find_unique_positions_from_splited_clusters.R

            cd good_clusters/

            ls |  while read filename;  do cat $filename;  done >./../good_clusters.bed

            cd ..

            cd clusters_without_pstI

            ls |  while read filename;  do cat $filename;  done >./../clusters_without_pstI.bed

            cd ./../../

            cat {output[0]} {output[1]} > {output[2]}

            bedtools sort -i {output[2]} > temp.bed
            mv temp.bed {output[2]}

            bedtools cluster -d -1 -s -i bed_files/msdartseq_positions.bed > bed_files/tmp.bed
            mv bed_files/tmp.bed bed_files/msdartseq_positions.bed

            bedtools sort -i {output[2]} > temp.bed
            mv temp.bed {output[2]}

            awk 'BEGIN{{OFS="\t"}}; {{name="MS-DArT_site_"NR; print $1,$2,$3,name,$5,$6,$8}}' {output[2]} > temp.bed
            mv temp.bed {output[2]}

        """

rule trimmomatic_to_counts:
    input:
        expand("{barcodes_files}", barcodes_files=config["barcodes_files"]),
        expand("{adapters_file}", adapters_file=config["adapters_file"]),
        expand("{fastq}.FASTQ.gz", fastq=config["fastq"])
    output:
        expand("{fastq}.without_barc_and_adapt_plus_qc.fq", fastq=config["fastq"])
    shell:
        """

            # defines the input files

            barcode_file1={input[0]}
            barcode_file2={input[1]}
            adapters_file={input[2]}

            # execute using the two sets of barcodes

            while read FILE barcode_sequence barcode_size
            do
            trimmomatic SE -threads 12 $FILE.FASTQ.gz $FILE.without_barc_and_adapt_plus_qc.fq ILLUMINACLIP:$adapters_file:2:30:6 SLIDINGWINDOW:5:25 HEADCROP:$barcode_size MINLEN:20
            done < "$barcode_file1"

            while read FILE barcode_sequence barcode_size
            do
            trimmomatic SE -threads 12 $FILE.FASTQ.gz $FILE.without_barc_and_adapt_plus_qc.fq ILLUMINACLIP:$adapters_file:2:30:6 SLIDINGWINDOW:5:25 HEADCROP:$barcode_size MINLEN:20
            done < "$barcode_file2"
        """

rule fastqc_to_counts:
    input:
        expand("{fastq}.without_barc_and_adapt_plus_qc.fq", fastq=config["fastq"])
    output:
        expand("fastqc_after_trimming/{fastq}.without_barc_and_adapt_plus_qc_fastqc.html", fastq=config["fastq"]),
        expand("fastqc_after_trimming/{fastq}.without_barc_and_adapt_plus_qc_fastqc.zip", fastq=config["fastq"])
    shell:
        "fastqc *_qc.fq;"
        "mv *fastqc.zip fastqc_after_trimming;"
        "mv *fastqc.html fastqc_after_trimming"

rule mapping_to_counts:
    input:
        expand("{reference_genome}", reference_genome=config["reference_genome"]),
        expand("{fastq}.without_barc_and_adapt_plus_qc.fq", fastq=config["fastq"])
    output:
        expand("mapping/{fastq}_{map}.fq", fastq=config["fastq"], map=config["mapping"]["fastq"]),
        expand("mapping/{fastq}{sam_samples}.sam", fastq=config["fastq"], sam_samples=config["mapping"]["sam_samples"])
    shell:
        """

            base=$(basename {input[0]} ".fa")

            bowtie2-build -f --threads 24 {input[0]} $base

        # 0 mismatch
        for sample in `ls ./*_qc.fq`
        do

        base=$(basename $sample ".without_barc_and_adapt_plus_qc.fq")
        echo $base
        bowtie2 -p 24 -q -k 2 -N 0 -L 15 -i S,1,0.50 -R 3 --no-1mm-upfront --end-to-end --no-unal --score-min L,0,0 -x Egrandis_297_v2.0.softmasked --un mapping/${{base}}_no_mapped_mm0.fq -U $sample -S mapping/${{base}}_mm0.sam

        done

        #1 mismatch
        for sample in `ls mapping/*_no_mapped_mm0.fq`
        do
        base=$(basename $sample "_no_mapped_mm0.fq")

        echo $base
        bowtie2 -p 24 -q -k 2 -N 0 -L 15 -i S,1,0.50 -R 3 --no-1mm-upfront --end-to-end --no-unal --mp 2 --np 10 --rdg 10 --rfg 10 --score-min L,-2,0 -x Egrandis_297_v2.0.softmasked --un mapping/${{base}}_no_mapped_mm1.fq -U mapping/${{base}}_no_mapped_mm0.fq -S mapping/${{base}}_mm1.sam
        done

        #2 mismatches
        for sample in `ls mapping/*_no_mapped_mm1.fq`
        do
        base=$(basename $sample "_no_mapped_mm1.fq")
        echo $base
        bowtie2 -p 24 -q -k 2 -N 0 -L 15 -i S,1,0.50 -R 3 --no-1mm-upfront --end-to-end --no-unal --mp 2 --np 10 --rdg 10 --rfg 10 --score-min L,-4,0 -x Egrandis_297_v2.0.softmasked --un mapping/${{base}}_no_mapped_mm2.fq -U mapping/${{base}}_no_mapped_mm1.fq -S mapping/${{base}}_mm2.sam
        done

        #3 mismatches
        for sample in `ls mapping/*_no_mapped_mm2.fq`
        do
        base=$(basename $sample "_no_mapped_mm2.fq")

        echo $base
        bowtie2 -p 24 -q -k 2 -N 0 -L 15 -i S,1,0.50 -R 3 --no-1mm-upfront --end-to-end --no-unal --mp 2 --np 10 --rdg 10 --rfg 10 --score-min L,-6,0 -x Egrandis_297_v2.0.softmasked --un mapping/${{base}}_no_mapped_mm3.fq -U mapping/${{base}}_no_mapped_mm2.fq -S mapping/${{base}}_mm3.sam
        done

        """

rule extract_sing_mapping_to_counts:
    input:
        expand("mapping/{fastq}{sam_samples}.sam", fastq=config["fastq"], sam_samples=config["mapping"]["sam_samples"])
    output:
        expand("mapping/{fastq}{sam_samples}.single_map.sam", fastq=config["fastq"], sam_samples=config["mapping"]["sam_samples"])
    shell:
        """
            for sample in `ls mapping/*.sam`
            do
            base=$(basename $sample \".sam\")

            samtools view -h mapping/${{base}}.sam | grep -v \"XS:i:\" > mapping/${{base}}.single_map.sam
            done

        """

rule sam_to_bam_to_counts:
    input:
        expand("mapping/{fastq}{sam_samples}.single_map.sam", fastq=config["fastq"], sam_samples=config["mapping"]["sam_samples"])
    output:
        expand("mapping/{fastq}{sam_samples}.single_map.bam", fastq=config["fastq"], sam_samples=config["mapping"]["sam_samples"])
    shell:
        """

            for sample in `ls mapping/*single_map.sam`
            do
            base=$(basename $sample \".sam\")
            samtools view -b mapping/${{base}}.sam > ${{base}}.bam
            samtools sort ${{base}}.bam > mapping/tmp.bam
            mv mapping/tmp.bam mapping/${{base}}.bam
            done

        """

rule merge_bam_to_counts:
    input:
        expand("mapping/{fastq}{sam_samples}.single_map.bam", fastq=config["fastq"], sam_samples=config["mapping"]["sam_samples"])
    output:
        expand("mapping/{fastq}_combined.bam", fastq=config["fastq"])
    shell:
        """

            for sample in `ls mapping/*_mm0.single_map.bam`
            do
            base=$(basename $sample "_mm0.single_map.bam")

            samtools merge -f mapping/${{base}}_combined.bam mapping/${{base}}_mm0.single_map.bam mapping/${{base}}_mm1.single_map.bam mapping/${{base}}_mm2.single_map.bam mapping/${{base}}_mm3.single_map.bam

            samtools sort mapping/${{base}}_combined.bam > tmp.bam
            mv tmp.bam mapping/${{base}}_combined.bam

            done

        """

rule featureCounts_input:
    input:
        expand("bed_files/{find_unique_pos}", find_unique_pos=config["find_unique_pos"])[2]
    output:
        expand("bed_files/{find_unique_pos}", find_unique_pos=config["featurecounts"])[0]
    shell:
        """
        awk 'BEGIN{{OFS="\t"}}; {{print $4,$1,$2,$3,$6}}' {input[0]} > {output[0]}
        """

rule featureCounts:
    input:
        expand("bed_files/{find_unique_pos}", find_unique_pos=config["featurecounts"])[0],
        expand("{names_correspondence}", names_correspondence=config["names_correspondence"]),
        expand("mapping/{fastq}_combined.bam", fastq=config["fastq"])
    output:
        expand("counts/{find_unique_pos}.tst", find_unique_pos=config["featurecounts"])[1]
    shell:
        """
        rm mapping/*.sam
        rm mapping/*single_map.sam

        declare -a list_of_bams
        list_of_bams=({input})
        list_of_bams="${{list_of_bams[@]:2}}"

        featureCounts -f -F SAF -R CORE -s 1 -T 12 -O -a {input[0]} -o {output[0]} $list_of_bams

        sed '1d' {output[0]} > tmp_counts
        mv tmp_counts {output[0]}

        while IFS=',' read bam_name sample_name
        do
        echo "sed -i 's|$bam_name|$sample_name|g' {output[0]}" >> rename.sh
        done < {input[1]}

        bash rename.sh

        rm rename.sh
        """

rule counts_correction:
    input:
        expand("bed_files/{find_unique_pos}", find_unique_pos=config["find_unique_pos"])[2],
        expand("counts/{find_unique_pos}.tst", find_unique_pos=config["featurecounts"])[1]
    output:
        expand("bed_files/{counts_correction}", counts_correction=config["counts_correction"])[0],
        expand("counts/{counts_correction}", counts_correction=config["counts_correction"])[1]
    shell:
        "Rscript counts_correction.R --out1 {output[0]} --out2 {output[1]} {input[0]} {input[1]};"

rule techinical_replicates:
    input:
        expand("counts/{counts_correction}", counts_correction=config["counts_correction"])[1]
    params:
        samples_with_tec_reps=expand("{techinical_replicates}", techinical_replicates=config["techinical_replicates"]["samples"])
    output:
        expand("counts/{techinical_replicates}", techinical_replicates=config["techinical_replicates"]["output"])
    script:
        "technical_reps_processing.R"

rule find_methylation_site_position_part1:
    input:
        expand("{met_site_input}", met_site_input=config["find_methylation_site_position_inputs_p1"])
    output:
    shell:
        "R CMD INSTALL {input[0]};"

rule find_methylation_site_position_part2:
    input:
        expand("{met_site_input}", met_site_input=config["find_methylation_site_position_inputs_p2"])
    output:
        expand("restriction_sites/{met_site_output}.bed", met_site_output=config["find_methylation_site_position_outputs_p2"])[0],
        expand("restriction_sites/{met_site_output}.bed", met_site_output=config["find_methylation_site_position_outputs_p2"])[1]
    shell:
        "Rscript restriction_sites_search.R --genome BSgenome.Egrandis.JGI.297 --out1 {output[0]} --out2 {output[1]} {input[0]}"

rule determines_sampled_site_position:
    input:
        expand("bed_files/{counts_correction}", counts_correction=config["counts_correction"])[0],
        expand("restriction_sites/{met_site_output}.bed", met_site_output=config["find_methylation_site_position_outputs_p2"])[0],
        expand("counts/{techinical_replicates}", techinical_replicates=config["techinical_replicates"]["output"])[1]
    output:
        expand("position_of_the_sampled_sites/{methylatio_site_output}.bed", methylatio_site_output=config["detemines_sampled_site_position"])[0],
        expand("position_of_the_sampled_sites/{methylatio_site_output}.bed", methylatio_site_output=config["detemines_sampled_site_position"])[1],
        expand("counts/{methylatio_site_output}.csv", methylatio_site_output=config["detemines_sampled_site_position"])[2]
    shell:
        "Rscript marks_closest_restriction_site_search.R --out1 {output[0]} --out2 {output[1]} --out3 {output[2]} {input[0]} {input[1]} {input[2]}"

rule determines_sampled_site_position_part_2:
    input:
        expand("position_of_the_sampled_sites/{methylatio_site_output}.bed", methylatio_site_output=config["detemines_sampled_site_position"])[1]
    output:
        expand("position_of_the_sampled_sites/{methylatio_site_output}_merged.tst", methylatio_site_output=config["detemines_sampled_site_position"])[1],
        expand("position_of_the_sampled_sites/{methylatio_site_output}_merged.bed", methylatio_site_output=config["detemines_sampled_site_position"])[1]
    shell:
        """

        bedtools merge -d -1 -s -c 6,2,3,4 -o distinct,collapse,collapse,collapse -delim '|' -i {input[0]} > {output[0]}

        awk 'BEGIN{{OFS=\"\t\"}}; {{print $1,$2,$3,$7,0,$4}}' {output[0]} > tempfile & mv tempfile {output[1]}

        """

rule fragments_analysis:
    input:
        expand("restriction_sites/{met_site_output}.bed", met_site_output=config["find_methylation_site_position_outputs_p2"])[0],
        expand("position_of_the_sampled_sites/{methylatio_site_output}.bed", methylatio_site_output=config["detemines_sampled_site_position"])[0]
    output:
        expand("in_silico_frags/{fragments_analysis_outptus}.bed", fragments_analysis_outptus=config["fragments_analysis_outptus"])[0],
        expand("in_silico_frags/{fragments_analysis_outptus}.txt", fragments_analysis_outptus=config["fragments_analysis_outptus"])[1],
        expand("images/in_silico_frags/{fragments_analysis_outptus}.svg", fragments_analysis_outptus=config["fragments_analysis_outptus"])[2]
    shell:
        "Rscript fragments_analysis.R --out1 {output[0]} --out2 {output[1]} --out3 {output[2]} {input[0]} {input[1]}"

rule distribution_of_the_selected_marks:
    input:
        expand("position_of_the_sampled_sites/{methylatio_site_output}.bed", methylatio_site_output=config["detemines_sampled_site_position"])[0]
    output:
        expand("images/sites_distribution/{dist_graph}", dist_graph=config["dist_graph"])[0]
    shell:
        "Rscript marks_dist_chr_plot.R --out1 {output[0]} {input[0]}"

rule marks_with_msp_bigger_than_0:
    input:
        expand("counts/{methylatio_site_output}.csv", methylatio_site_output=config["detemines_sampled_site_position"])[2]
    output:
        expand("true_sites/{groups}_{output_bigger_than_0}.txt", groups=config["DEseq2_with_DArTCounts_params"]["groups"], output_bigger_than_0=config["marks_with_msp_outputs"])
    script:
        "marks_with_msp_bigger_than_0.R"

rule intersect_marks:
    input:
        expand("position_of_the_sampled_sites/{methylatio_site_output}_merged.bed", methylatio_site_output=config["detemines_sampled_site_position"])[1],
        expand("true_sites/{groups}_{output_bigger_than_0}.txt", groups=config["DEseq2_with_DArTCounts_params"]["groups"], output_bigger_than_0=config["marks_with_msp_outputs"])
    params:
        names=expand("{intersect_params}", intersect_params=config["clones_names"]),
        tissue=expand("{intersect_params}", intersect_params=config["tissues"]),
        enzyme=expand("{intersect_params}", intersect_params=config["enzymes"]),
        prefix_samples=expand("{intersect_params}", intersect_params=config["intersect_marks_params"]["prefix"])[0],
        prefix_groups=expand("{intersect_params}", intersect_params=config["intersect_marks_params"]["prefix"])[1],
        prefix_all=expand("{intersect_params}", intersect_params=config["intersect_marks_params"]["prefix"])[2],
        groups=expand("{intersect_groups}", intersect_groups=config["DEseq2_with_DArTCounts_params"]["groups"])
    output:
        expand("{intersect_params}_intersect_marks.txt", intersect_params=config["intersect_marks_params"]["prefix"])
    script:
        "intersect_marks_g4.R"

rule DEseq2_with_DArTCounts:
    input:
        expand("counts/{methylatio_site_output}.csv", methylatio_site_output=config["detemines_sampled_site_position"])[2],
        expand("{intersect_params}_intersect_marks.txt", intersect_params=config["intersect_marks_params"]["prefix"])[2],
    params:
        groups=expand("{deseq_params}", deseq_params=config["DEseq2_with_DArTCounts_params"]["groups"]),
        prefix=expand("{deseq_params}", deseq_params=config["DEseq2_with_DArTCounts_params"]["prefix"]),
        genotypes=expand("{deseq_params}", deseq_params=config["clones_names"]),
        tissues=expand("{deseq_params}", deseq_params=config["tissues"]),
        sep_into=expand("{deseq_params}", deseq_params=config["DEseq2_with_DArTCounts_params"]["sep_into"]),
        subset_model=expand("{deseq_params}", deseq_params=config["DEseq2_with_DArTCounts_params"]["subset_model"]),
        no_bio_rep=expand("{deseq_params}", deseq_params=config["DEseq2_with_DArTCounts_params"]["no_bio_rep"]),
        dispersion=expand("{deseq_params}", deseq_params=config["DEseq2_with_DArTCounts_params"]["dispersion"]),
        min_msp=expand("{deseq_params}", deseq_params=config["DEseq2_with_DArTCounts_params"]["min_msp"]),
        fdr=expand("{deseq_params}", deseq_params=config["DEseq2_with_DArTCounts_params"]["fdr"]),
        log_fold_change=expand("{deseq_params}", deseq_params=config["DEseq2_with_DArTCounts_params"]["log_fold_change"]),
        filtration_mode=expand("{deseq_params}", deseq_params=config["DEseq2_with_DArTCounts_params"]["filter"]),
        samples_without_rep=expand("{deseq_params}", deseq_params=config["DEseq2_with_DArTCounts_params"]["samples_without_rep"])
    output:
        expand("{prefix_deseq}_{groups}_{subset_model}_DE_stats.txt", prefix_deseq=config["DEseq2_with_DArTCounts_params"]["prefix"], groups=config["DEseq2_with_DArTCounts_params"]["groups"],
        subset_model=config["DEseq2_with_DArTCounts_params"]["subset_model"]),
        expand("{prefix_deseq}_{groups}_{subset_model}_DE_marks.txt", prefix_deseq=config["DEseq2_with_DArTCounts_params"]["prefix"], groups=config["DEseq2_with_DArTCounts_params"]["groups"],
        subset_model=config["DEseq2_with_DArTCounts_params"]["subset_model"]),
        expand("{clones}_{tissue}_msp_bigger_than_threshold.txt", clones=config["clones_names"] , tissue=config["tissues"])
    script:
        "deseq2_with_DArTCounts.R"

rule mstags_to_mssites:
    input:
        expand("{prefix_deseq}_{groups}_{subset_model}_DE_marks.txt", prefix_deseq=config["DEseq2_with_DArTCounts_params"]["prefix"], groups=config["DEseq2_with_DArTCounts_params"]["groups"], subset_model=config["DEseq2_with_DArTCounts_params"]["subset_model"]),
        expand("position_of_the_sampled_sites/{methylatio_site_output}_merged.bed", methylatio_site_output=config["detemines_sampled_site_position"])[1]
    output:
        expand("{prefix_deseq}_{groups}_consensus_methylated_sites_{subset_model}.tst",prefix_deseq=config["DEseq2_with_DArTCounts_params"]["prefix"], groups=config["DEseq2_with_DArTCounts_params"]["groups"], subset_model=config["DEseq2_with_DArTCounts_params"]["subset_model"])
    script:
        "convert_tags_to_mssites.R"

rule venn_plots_g2_g3:
    input:
        expand("{prefix_deseq}_{groups}_consensus_methylated_sites_{subset_model}.tst",prefix_deseq=config["DEseq2_with_DArTCounts_params"]["prefix"], groups=config["DEseq2_with_DArTCounts_params"]["groups"], subset_model=config["DEseq2_with_DArTCounts_params"]["subset_model"])
    output:
        expand("images/venn_plots_by_group/{outputs_venn}", outputs_venn=config["venn_plots_g2_g3_outputs"]["marks"]),
        expand("intersections_to_bar_plot/{outputs_venn_text}_Leaf-MG_vs_Leaf-PR_intersection_marks.txt", outputs_venn_text=config["clones_names"]),
        expand("intersections_to_bar_plot/{outputs_venn_text}_Leaf-MG_vs_Leaf-PR_Leaf-MG_unique_marks.txt", outputs_venn_text=config["clones_names"]),
        expand("intersections_to_bar_plot/{outputs_venn_text}_Leaf-MG_vs_Leaf-PR_Leaf-PR_unique_marks.txt", outputs_venn_text=config["clones_names"]),
        expand("intersections_to_bar_plot/{outputs_venn_text}_Wood-MG_vs_Wood-PR_intersection_marks.txt", outputs_venn_text=config["clones_names"]),
        expand("intersections_to_bar_plot/{outputs_venn_text}_Wood-MG_vs_Wood-PR_Wood-MG_unique_marks.txt", outputs_venn_text=config["clones_names"]),
        expand("intersections_to_bar_plot/{outputs_venn_text}_Wood-MG_vs_Wood-PR_Wood-PR_unique_marks.txt", outputs_venn_text=config["clones_names"])
    script:
        "venn_diag_msdart_sites.R"

rule bar_plot_DM_marks_g2_g3:
    input:
        expand("intersections_to_bar_plot/{outputs_venn_text}_Leaf-MG_vs_Leaf-PR_intersection_marks.txt", outputs_venn_text=config["clones_names"]),
        expand("intersections_to_bar_plot/{outputs_venn_text}_Leaf-MG_vs_Leaf-PR_Leaf-MG_unique_marks.txt", outputs_venn_text=config["clones_names"]),
        expand("intersections_to_bar_plot/{outputs_venn_text}_Leaf-MG_vs_Leaf-PR_Leaf-PR_unique_marks.txt", outputs_venn_text=config["clones_names"]),
        expand("intersections_to_bar_plot/{outputs_venn_text}_Wood-MG_vs_Wood-PR_intersection_marks.txt", outputs_venn_text=config["clones_names"]),
        expand("intersections_to_bar_plot/{outputs_venn_text}_Wood-MG_vs_Wood-PR_Wood-MG_unique_marks.txt", outputs_venn_text=config["clones_names"]),
        expand("intersections_to_bar_plot/{outputs_venn_text}_Wood-MG_vs_Wood-PR_Wood-PR_unique_marks.txt", outputs_venn_text=config["clones_names"])
    output:
        expand("images/bar_plots/{outputs_venn}", outputs_venn=config["venn_plots_g2_g3_outputs"]["file_name"])
    script:
        "bar_plot_MSD_methylated_sites.R"

rule SuperExactTest:
    input:
        expand("{prefix_deseq}_{groups}_consensus_methylated_sites_{subset_model}.tst", prefix_deseq=config["DEseq2_with_DArTCounts_params"]["prefix"], groups=config["DEseq2_with_DArTCounts_params"]["groups"], subset_model=config["DEseq2_with_DArTCounts_params"]["subset_model"])
    params:
        population_size_marks=config["SuperExactTest"]["population_size_marks"],
        sufix_same_clone=config["SuperExactTest"]["sufix_same_clone"],
        sufix_same_place=config["SuperExactTest"]["sufix_same_place"],
        sufix_intersect_in_each_place=config["SuperExactTest"]["sufix_intersect_in_each_place"],
        sufix_input_files_wood=config["SuperExactTest"]["sufix_input_files_wood"],
        sufix_input_files_leaf=config["SuperExactTest"]["sufix_input_files_leaf"],
        tissues=expand("{tissues_params}", tissues_params=config["tissues"]),
        places=expand("{places_params}", places_params=config["places_g2_g3"]),
        genotypes=config["clones_names"],
        genotypes_MG_prod_order=config["SuperExactTest"]["genotypes_MG_prod_order"],
        genotypes_PR_prod_order=config["SuperExactTest"]["genotypes_PR_prod_order"],
        groups_graphs_3=config["SuperExactTest"]["groups_graphs_3"]
    output:
        expand("images/SuperExactTest/{outputs_super}{sufix}.svg", outputs_super=config["clones_names"], sufix=config["SuperExactTest"]["sufix_same_clone"]),
        expand("super_exact_out/summary_{outputs_super}{sufix}.txt", outputs_super=config["clones_names"], sufix=config["SuperExactTest"]["sufix_same_clone"]),
        expand("images/SuperExactTest/{tissues}_{sufix_same_place}_{place}.svg", tissues=config["tissues"], sufix_same_place=config["SuperExactTest"]["sufix_same_place"], place=config["places_g2_g3"]),
        expand("super_exact_out/summary_{tissues}_{sufix_same_place}_{place}.txt", tissues=config["tissues"], sufix_same_place=config["SuperExactTest"]["sufix_same_place"], place=config["places_g2_g3"]),
        expand("images/SuperExactTest/{sufix_exclusive_in_each_place}_{tissues}_{places_int}.svg", sufix_exclusive_in_each_place=config["SuperExactTest"]["sufix_intersect_in_each_place"], places_int=config["SuperExactTest"]["groups_graphs_3"], tissues=config["tissues"]),
        expand("super_exact_out/summary_{sufix_exclusive_in_each_place}_{tissues}_{places_int}.txt", sufix_exclusive_in_each_place=config["SuperExactTest"]["sufix_intersect_in_each_place"], places_int=config["SuperExactTest"]["groups_graphs_3"], tissues=config["tissues"])
    script:
        "super_exact_graphs.R"

rule counts_larger_than_threshold:
    input:
        expand("{clones}_{tissue}_msp_bigger_than_threshold.txt", clones=config["clones_names"] , tissue=config["tissues"])
    output:
        expand("{file}", file=config["counts_larger_than_threshold"])
    shell:
        """
        cat {input} > {output[0]}
        """

rule make_bed_methylated_sites:
    input:
        expand("position_of_the_sampled_sites/{methylatio_site_output}_merged.bed", methylatio_site_output=config["detemines_sampled_site_position"])[1],
        expand("{prefix_deseq}_{groups}_consensus_methylated_sites_{subset_model}.tst", prefix_deseq=config["DEseq2_with_DArTCounts_params"]["prefix"], groups=config["DEseq2_with_DArTCounts_params"]["groups"], subset_model=config["DEseq2_with_DArTCounts_params"]["subset_model"])
    output:
        expand("methylated_sites/{make_bed_methylated_sites}", make_bed_methylated_sites=config["make_bed_methylated_sites"])
    script:
        "make_bed_methylated_sites.R"

rule genomic_context:
    input:
        expand("methylated_sites/{make_bed_methylated_sites}", make_bed_methylated_sites=config["make_bed_methylated_sites"])[1],
        expand("{prefix_deseq}_{groups}_consensus_methylated_sites_intersect.tst", prefix_deseq=config["DEseq2_with_DArTCounts_params"]["prefix"], groups=config["DEseq2_with_DArTCounts_params"]["groups"], subset_model=config["DEseq2_with_DArTCounts_params"]["subset_model"]),
        expand("{genome}", genome=config["genome_annotation_file"]),
        expand("{transposons_file}", transposons_file=config["transposons_file"])
    output:
        expand("genomic_context_files/{genomic_context}", genomic_context=config["genomic_context_outputs"])[0:6],
        expand("images/genomic_context/{genomic_context}", genomic_context=config["genomic_context_outputs"])[6],
        expand("{p2_out2}", p2_out2=config["p2_out2"]),
        expand("{p4_out1}", p4_out1=config["p4_out1"]),
        expand("{p4_out2}", p4_out2=config["p4_out2"]),
        expand("{p4_out3}", p4_out3=config["p4_out3"]),
        expand("{p4_out4}", p4_out4=config["p4_out4"])
    params:
        p1_out1=config["p1_out1"],
        p1_out2=config["p1_out2"],
        p2_out1=config["p2_out1"],
        p2_out2=config["p2_out2"],
        p3_out1=config["p3_out1"],
        p3_out2=config["p3_out2"],
        p3_out3=config["p3_out3"],
        p4_out1=config["p4_out1"],
        p4_out2=config["p4_out2"],
        p4_out3=config["p4_out3"],
        p4_out4=config["p4_out4"]
    shell:
        #Prepares the files
        "grep \"gene\" {input[3]} > genomic_context_files/gene_features.gff3;"
        "sortBed -i genomic_context_files/gene_features.gff3 > {output[0]};"
        "grep \"exon\" {input[3]} > genomic_context_files/exons_features.gff3;"
        "intersectBed -nonamecheck -wo -a {input[0]} -b {output[0]} > {output[1]};"
        #Part1
        "Rscript id_part1.R --out1 {params.p1_out1} --out2 {params.p1_out2} {input[0]} {output[1]};"
        "sortBed -i {params.p1_out2} > {params.p1_out2}.sorted.bed;"
        "intersectBed -nonamecheck -wo -a {params.p1_out2}.sorted.bed -b {input[4]} > {output[2]};"
        #Part2
        "Rscript id_part2.R --out1 {params.p2_out1} --out2 {params.p2_out2} {params.p1_out2} {output[2]};"
        "intersectBed -nonamecheck -wo -a {params.p1_out1} -b genomic_context_files/exons_features.gff3 > {output[3]};"
        #Part3
        "Rscript id_part3.R --out1 {params.p3_out1} --out2 {params.p3_out2} --out3 {params.p3_out3} {params.p1_out1} {output[3]};"
        "intersectBed -nonamecheck -wo -a {params.p3_out1} -b {input[4]} > {output[4]};"
        "intersectBed -nonamecheck -wo -a {params.p3_out3} -b {input[4]} > {output[5]};"
        #Part4
        "Rscript id_part4.R --out1 {params.p4_out1} --out2 {params.p4_out2} --out3 {params.p4_out3} --out4 {params.p4_out4} {params.p3_out1} {output[4]} {params.p3_out3} {output[5]};"
        #"Rscript id_pie_chart.R"
        "Rscript id_pie_chart.R --out1 {output[6]} {params.p2_out2} {params.p2_out1} {params.p4_out1} {params.p4_out2} {params.p3_out2} {params.p4_out3} {params.p4_out4} {input[1]} {input[2]}"

rule transposons_plots:
    input:
        expand("genomic_context_files/{genomic_context}", genomic_context=config["genomic_context_outputs"])[2],
        expand("genomic_context_files/{genomic_context}", genomic_context=config["genomic_context_outputs"])[5],
        expand("{prefix_deseq}_{groups}_consensus_methylated_sites_intersect.tst", prefix_deseq=config["DEseq2_with_DArTCounts_params"]["prefix"], groups=config["DEseq2_with_DArTCounts_params"]["groups"], subset_model=config["DEseq2_with_DArTCounts_params"]["subset_model"]),
        expand("{transposons_file}", transposons_file=config["transposons_file"])
    params:
        use_intersections=expand("{use_intersections}", use_intersections=config["transposons_plots_params"]["use_intersections"]),
    output:
        expand("genomic_context_files/group_{group}_{transposons_for_sample}", group=config["DEseq2_with_DArTCounts_params"]["groups"], transposons_for_sample=config["transposons_plots"]["transposons_for_sample"]),
        expand("images/transposons_plots/group_{group}_{tissue}_MSDArT_superexact_plot_TE.svg", group=config["DEseq2_with_DArTCounts_params"]["groups"], tissue=config["tissues"]),
        expand("genomic_context_files/group_{group}_{tissue}_{transposons_sup}", group=config["DEseq2_with_DArTCounts_params"]["groups"], tissue=config["tissues"], transposons_sup=config["transposons_plots"]["transposon_superexact"]),
        expand("genomic_context_files/{transposons_table}", transposons_table=config["transposons_plots"]["transposons_table"]),
        expand("images/transposons_plots/{transposon_bar_plot}", transposon_bar_plot=config["transposons_plots"]["transposon_bar_plot"])
    script:
        "transposons_plots.R"

rule PCAs:
    input:
        expand("counts/{methylatio_site_output}.csv", methylatio_site_output=config["detemines_sampled_site_position"])[2],
        expand("methylated_sites/{make_bed_methylated_sites}", make_bed_methylated_sites=config["make_bed_methylated_sites"])[1]
    output:
        expand("images/PCAs/{outputs_pcas}", outputs_pcas=config["PCA"]["outputs"])
    script:
        "pcas_brasuz.R"

rule BioMart:
    input:
        expand("{genome}", genome=config["genome_annotation_file"])
    params:
        annotation_file_rda=expand("{annotation_file_rda}", annotation_file_rda=config["biomart_params"]["annotation_file_rda"]),
        its_in_listMarts=expand("{its_in_listMarts}", its_in_listMarts=config["biomart_params"]["its_in_listMarts"]),
        biomart_name=expand("{biomart_name}", biomart_name=config["biomart_params"]["biomart_name"]),
        biomart_dataset=expand("{biomart_dataset}", biomart_dataset=config["biomart_params"]["biomart_dataset"]),
        biomart_host=expand("{biomart_host}", biomart_host=config["biomart_params"]["biomart_host"]),
        biomart_vschema=expand("{biomart_vschema}", biomart_vschema=config["biomart_params"]["biomart_vschema"]),
        c_name=expand("{c_name}", c_name=config["biomart_params"]["c_name"])
    output:
        expand("annotation/biomart/{biomart_output}", biomart_output=config["biomart_output"])
    script:
        "BioMart.R"

rule distance_methylated_sites_to_genes:
    input:
        expand("position_of_the_sampled_sites/{methylatio_site_output}_merged.bed", methylatio_site_output=config["detemines_sampled_site_position"])[1],
        expand("genomic_context_files/{genomic_context}", genomic_context=config["genomic_context_outputs"])[0],
    output:
        expand("annotation/{annotation_table_output}", annotation_table_output=config["make_annotation_table"]["annotation_table_output"])[0]
    shell:
        "closestBed -nonamecheck -s -D b -a {input[0]} -b {input[1]} > {output[0]}"

rule make_annotation_table:
    input:
        expand("{annotation_table_inputs}", annotation_table_inputs=config["make_annotation_table"]["annotation_table_inputs"]),
        expand("annotation/biomart/{biomart_output}", biomart_output=config["biomart_output"]),
        expand("annotation/{annotation_table_output}", annotation_table_output=config["make_annotation_table"]["annotation_table_output"])[0]
    output:
        expand("annotation/biomart_blast2go/{annotation_table_output}", annotation_table_output=config["make_annotation_table"]["annotation_table_output"])[1]
    script:
        "combine_annotations.R"

rule phenotype:
    input:
        expand("{phenotype_input}", phenotype_input=config["phenotype_input"])
    output:
        expand("images/phenotype/{phenotype_outs}", phenotype_outs=config["phenotype_outs"])
    script:
        "phenotype.R"
